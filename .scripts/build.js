const ejs = require("ejs");
const { join } = require("path");
const { ensureFile, writeFile, readFile, readJson } = require("fs-extra");
const { minify } = require("html-minifier");
const imageDataURI = require("image-data-uri");

const templatePath = join(__dirname, "../src/index.html");
const outPath = join(__dirname, "../public/index.html");
const backgroundImagePath = join(__dirname, "../src/assets/background.jpg");
const contentPath = join(__dirname, "../src/content.json");

const minifyOptions = {
  removeComments: true,
  removeCommentsFromCDATA: true,
  removeCDATASectionsFromCDATA: true,
  collapseWhitespace: true,
  collapseBooleanAttributes: true,
  removeRedundantAttributes: true,
  removeEmptyAttributes: true,
  // As svg's need this
  removeEmptyElements: false,
  // This will take out space between links and text
  collapseInlineTagWhitespace: false,
  decodeEntities: true,
  html5: true,
  includeAutoGeneratedTags: true,
  minifyCSS: true,
  minifyJS: true,
  minifyURLs: true
};

const getRenderData = () =>
  readJson(contentPath).then(content =>
    Promise.all([
      readFile(backgroundImagePath).then(backgroundImageBuffer => ({
        backgroundImage: imageDataURI.encode(backgroundImageBuffer, "JPEG")
      })),
      Promise.all(
        content.icons.map(({ icon, href }) =>
          readFile(join(__dirname, `../src/assets/${icon}.svg`)).then(data => ({
            icon: String(data),
            href
          }))
        )
      ).then(newIcons => ({
        icons: newIcons
      }))
    ]).then(results =>
      results.reduce((acc, res) => ({ ...acc, ...res }), content)
    )
  );

getRenderData()
  .then(data => ejs.renderFile(templatePath, data, { async: true }))
  .then(content =>
    ensureFile(outPath).then(() =>
      writeFile(outPath, minify(content, minifyOptions))
    )
  );
