const ejs = require("ejs");
const { join } = require("path");
const { ensureFile, writeFile, readFile } = require("fs-extra");
const { minify } = require("html-minifier");
const imageDataURI = require("image-data-uri");
const JSON5 = require("json5");

const templatePath = join(__dirname, "../src/index.html");
const outPath = join(__dirname, "../docs/index.html");
const backgroundImagePath = join(__dirname, "../src/assets/image.jpg");
const contentPath = join(__dirname, "../src/content.json");

const minifyOptions = {
  removeComments: true,
  removeCommentsFromCDATA: true,
  removeCDATASectionsFromCDATA: true,
  collapseWhitespace: true,
  collapseBooleanAttributes: true,
  removeRedundantAttributes: true,
  removeEmptyAttributes: true,
  // As svg's need this
  removeEmptyElements: false,
  // This will take out space between links and text
  collapseInlineTagWhitespace: false,
  decodeEntities: true,
  html5: true,
  includeAutoGeneratedTags: true,
  minifyCSS: true,
  minifyJS: true,
  minifyURLs: true
};

const getRenderData = () =>
  readFile(contentPath)
    .then(contents => {
      return JSON5.parse(contents.toString());
    })
    .then(content =>
      Promise.all([
        readFile(backgroundImagePath).then(backgroundImageBuffer => ({
          backgroundImage: imageDataURI.encode(backgroundImageBuffer, "JPEG")
        })),
        Promise.all(
          content.icons.map(({ icon, href }) =>
            readFile(join(__dirname, `../src/assets/${icon}.svg`)).then(
              data => ({
                icon: String(data),
                href
              })
            )
          )
        ).then(newIcons => ({
          icons: newIcons
        }))
      ]).then(results =>
        results.reduce((acc, res) => ({ ...acc, ...res }), content)
      )
    );

getRenderData()
  .then(data => ejs.renderFile(templatePath, data, { async: true }))
  .then(content =>
    ensureFile(outPath).then(() =>
      writeFile(outPath, minify(content, minifyOptions))
    )
  );
