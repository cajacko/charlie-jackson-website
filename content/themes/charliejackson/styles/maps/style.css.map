{"version":3,"sources":["variables/_mq.scss","general/_headings.scss","variables/_fontSizes.scss","general/_media.scss","general/_paragraphs.scss","general/_lists.scss","general/_links.scss","variables/_colours.scss","components/_Html.scss","components/_Body.scss","variables/_layout.scss","../../../../../node_modules/sass-mq/_mq.scss","components/_SiteHeader.scss","variables/_spacing.scss","components/_Now.scss","components/_Social.scss","components/_Projects.scss","components/_ProjectLoopItem.scss","components/_Project.scss"],"names":[],"mappings":"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","file":"../sass/style.css","sourcesContent":["/**\r\n * Defines the breakpoints and their associated names.\r\n *\r\n * Uses the mq sass plugin: https://github.com/sass-mq/sass-mq\r\n */\n\n$mobileBreakpoint: $maxWidth + 40;\n\n$mq-breakpoints: (\r\n    mobile: $mobileBreakpoint,\n);\r\n","h1,\r\nh2,\r\nh3,\r\nh4,\r\nh5,\r\nh6 {\r\n  margin: $paragraphSpacing 0 0.5em 0;\r\n  padding: 0;\r\n}\r\n\r\nh1 {\r\n  font-size: $fontSize-largest;\r\n}\r\n\r\nh2 {\r\n  font-size: $fontSize-larger;\r\n}\r\n\r\nh3 {\r\n  font-size: $fontSize-large;\r\n}\r\n\r\nh4,\r\nh5,\r\nh6 {\r\n  font-size: $fontSize-base;\r\n}\r\n","$fontSize-base: 16px;\r\n$fontSize-large: 1.25rem;\r\n$fontSize-larger: 1.5rem;\r\n$fontSize-largest: 1.75rem;\r\n$fontSize-small: 0.75rem;\r\n","img {\r\n  max-width: 100%;\r\n  height: auto;\r\n}\r\n","p {\r\n  margin: 0 0 $paragraphSpacing 0;\r\n}\r\n","$listPadding: $paragraphSpacing * 2;\r\n\r\nul,\r\nol {\r\n  margin: $paragraphSpacing 0;\r\n  padding-left: $listPadding;\r\n}\r\n","a {\r\n  text-decoration: none;\r\n  color: $linkColour;\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    color: $linkHighlight;\r\n    text-decoration: underline;\r\n\r\n    img {\r\n      filter: grayscale(30%) brightness(90%);\r\n    }\r\n  }\r\n}\r\n","$lightGrey: #eaeaea;\r\n$linkColour: #006c98;\r\n$linkHighlight: #005c82;\r\n\r\n$twitterBlue: #55acee;\r\n$twitterBlue--highlight: #127ef9;\r\n$githubBlack: black;\r\n$githubBlack--highlight: #505050;\r\n$linkedInBlue: #007bb5;\r\n$linkedInBlue--highlight: #005780;\r\n$pinterestRed: #cb2027;\r\n$pinterestRed--highlight: #9e151b;\r\n$emailBlue: $linkColour;\r\n$emailBlue--highlight: $linkHighlight;\r\n$youTubeRed: #C33C2D;\r\n$youTubeRed--highlight: #7b2117;\r\n$youTubeGrey: #D8D9D9;\r\n$youTubeWhite: #FFFFFF;\r\n",".Html {\r\n  font-family: 'Lato', sans-serif;\r\n  line-height: 1.5;\r\n  font-size: $fontSize-base;\r\n}\r\n",".Body {\r\n  max-width: $maxWidth;\n  margin: 0 auto;\n\n  @include mq($until: mobile) {\n    padding: 0 10px;\n  }\n}\r\n","$maxWidth: 600px;\r\n","@charset \"UTF-8\"; // Fixes an issue where Ruby locale is not set properly\n                  // See https://github.com/sass-mq/sass-mq/pull/10\n\n/// Base font size on the `<body>` element\n/// @type Number (unit)\n$mq-base-font-size: 16px !default;\n\n/// Responsive mode\n///\n/// Set to `false` to enable support for browsers that do not support @media queries,\n/// (IE <= 8, Firefox <= 3, Opera <= 9)\n///\n/// You could create a stylesheet served exclusively to older browsers,\n/// where @media queries are rasterized\n///\n/// @example scss\n///  // old-ie.scss\n///  $mq-responsive: false;\n///  @import 'main'; // @media queries in this file will be rasterized up to $mq-static-breakpoint\n///                   // larger breakpoints will be ignored\n///\n/// @type Boolean\n/// @link https://github.com/sass-mq/sass-mq#responsive-mode-off Disabled responsive mode documentation\n$mq-responsive: true !default;\n\n/// Breakpoint list\n///\n/// Name your breakpoints in a way that creates a ubiquitous language\n/// across team members. It will improve communication between\n/// stakeholders, designers, developers, and testers.\n///\n/// @type Map\n/// @link https://github.com/sass-mq/sass-mq#seeing-the-currently-active-breakpoint Full documentation and examples\n$mq-breakpoints: (\n    mobile:  320px,\n    tablet:  740px,\n    desktop: 980px,\n    wide:    1300px\n) !default;\n\n/// Static breakpoint (for fixed-width layouts)\n///\n/// Define the breakpoint from $mq-breakpoints that should\n/// be used as the target width for the fixed-width layout\n/// (i.e. when $mq-responsive is set to 'false') in a old-ie.scss\n///\n/// @example scss\n///  // tablet-only.scss\n///  //\n///  // Ignore all styles above tablet breakpoint,\n///  // and fix the styles (e.g. layout) at tablet width\n///  $mq-responsive: false;\n///  $mq-static-breakpoint: tablet;\n///  @import 'main'; // @media queries in this file will be rasterized up to tablet\n///                   // larger breakpoints will be ignored\n///\n/// @type String\n/// @link https://github.com/sass-mq/sass-mq#adding-custom-breakpoints Full documentation and examples\n$mq-static-breakpoint: desktop !default;\n\n/// Show breakpoints in the top right corner\n///\n/// If you want to display the currently active breakpoint in the top\n/// right corner of your site during development, add the breakpoints\n/// to this list, ordered by width, e.g. (mobile, tablet, desktop).\n///\n/// @type map\n$mq-show-breakpoints: () !default;\n\n/// Customize the media type (e.g. `@media screen` or `@media print`)\n/// By default sass-mq uses an \"all\" media type (`@media all and …`)\n///\n/// @type String\n/// @link https://github.com/sass-mq/sass-mq#changing-media-type Full documentation and examples\n$mq-media-type: all !default;\n\n/// Convert pixels to ems\n///\n/// @param {Number} $px - value to convert\n/// @param {Number} $base-font-size ($mq-base-font-size) - `<body>` font size\n///\n/// @example scss\n///  $font-size-in-ems: mq-px2em(16px);\n///  p { font-size: mq-px2em(16px); }\n///\n/// @requires $mq-base-font-size\n/// @returns {Number}\n@function mq-px2em($px, $base-font-size: $mq-base-font-size) {\n    @if unitless($px) {\n        @warn \"Assuming #{$px} to be in pixels, attempting to convert it into pixels.\";\n        @return mq-px2em($px * 1px, $base-font-size);\n    } @else if unit($px) == em {\n        @return $px;\n    }\n    @return ($px / $base-font-size) * 1em;\n}\n\n/// Get a breakpoint's width\n///\n/// @param {String} $name - Name of the breakpoint. One of $mq-breakpoints\n///\n/// @example scss\n///  $tablet-width: mq-get-breakpoint-width(tablet);\n///  @media (min-width: mq-get-breakpoint-width(desktop)) {}\n///\n/// @requires {Variable} $mq-breakpoints\n///\n/// @returns {Number} Value in pixels\n@function mq-get-breakpoint-width($name, $breakpoints: $mq-breakpoints) {\n    @if map-has-key($breakpoints, $name) {\n        @return map-get($breakpoints, $name);\n    } @else {\n        @warn \"Breakpoint #{$name} wasn't found in $breakpoints.\";\n    }\n}\n\n/// Media Query mixin\n///\n/// @param {String | Boolean} $from (false) - One of $mq-breakpoints\n/// @param {String | Boolean} $until (false) - One of $mq-breakpoints\n/// @param {String | Boolean} $and (false) - Additional media query parameters\n/// @param {String} $media-type ($mq-media-type) - Media type: screen, print…\n///\n/// @ignore Undocumented API, for advanced use only:\n/// @ignore @param {Map} $breakpoints ($mq-breakpoints)\n/// @ignore @param {String} $static-breakpoint ($mq-static-breakpoint)\n///\n/// @content styling rules, wrapped into a @media query when $responsive is true\n///\n/// @requires {Variable} $mq-media-type\n/// @requires {Variable} $mq-breakpoints\n/// @requires {Variable} $mq-static-breakpoint\n/// @requires {function} mq-px2em\n/// @requires {function} mq-get-breakpoint-width\n///\n/// @link https://github.com/sass-mq/sass-mq#responsive-mode-on-default Full documentation and examples\n///\n/// @example scss\n///  .element {\n///    @include mq($from: mobile) {\n///      color: red;\n///    }\n///    @include mq($until: tablet) {\n///      color: blue;\n///    }\n///    @include mq(mobile, tablet) {\n///      color: green;\n///    }\n///    @include mq($from: tablet, $and: '(orientation: landscape)') {\n///      color: teal;\n///    }\n///    @include mq(950px) {\n///      color: hotpink;\n///    }\n///    @include mq(tablet, $media-type: screen) {\n///      color: hotpink;\n///    }\n///    // Advanced use:\n///    $my-breakpoints: (L: 900px, XL: 1200px);\n///    @include mq(L, $breakpoints: $my-breakpoints, $static-breakpoint: L) {\n///      color: hotpink;\n///    }\n///  }\n@mixin mq(\n    $from: false,\n    $until: false,\n    $and: false,\n    $media-type: $mq-media-type,\n    $breakpoints: $mq-breakpoints,\n    $responsive: $mq-responsive,\n    $static-breakpoint: $mq-static-breakpoint\n) {\n    $min-width: 0;\n    $max-width: 0;\n    $media-query: '';\n\n    // From: this breakpoint (inclusive)\n    @if $from {\n        @if type-of($from) == number {\n            $min-width: mq-px2em($from);\n        } @else {\n            $min-width: mq-px2em(mq-get-breakpoint-width($from, $breakpoints));\n        }\n    }\n\n    // Until: that breakpoint (exclusive)\n    @if $until {\n        @if type-of($until) == number {\n            $max-width: mq-px2em($until);\n        } @else {\n            $max-width: mq-px2em(mq-get-breakpoint-width($until, $breakpoints)) - .01em;\n        }\n    }\n\n    // Responsive support is disabled, rasterize the output outside @media blocks\n    // The browser will rely on the cascade itself.\n    @if $responsive == false {\n        $static-breakpoint-width: mq-get-breakpoint-width($static-breakpoint, $breakpoints);\n        $target-width: mq-px2em($static-breakpoint-width);\n\n        // Output only rules that start at or span our target width\n        @if (\n            $and == false\n            and $min-width <= $target-width\n            and (\n                $until == false or $max-width >= $target-width\n            )\n        ) {\n            @content;\n        }\n    }\n\n    // Responsive support is enabled, output rules inside @media queries\n    @else {\n        @if $min-width != 0 { $media-query: '#{$media-query} and (min-width: #{$min-width})'; }\n        @if $max-width != 0 { $media-query: '#{$media-query} and (max-width: #{$max-width})'; }\n        @if $and            { $media-query: '#{$media-query} and #{$and}'; }\n\n        // Remove unnecessary media query prefix 'all and '\n        @if ($media-type == 'all' and $media-query != '') {\n            $media-type: '';\n            $media-query: str-slice(unquote($media-query), 6);\n        }\n\n        @media #{$media-type + $media-query} {\n            @content;\n        }\n    }\n}\n\n/// Add a breakpoint\n///\n/// @param {String} $name - Name of the breakpoint\n/// @param {Number} $width - Width of the breakpoint\n///\n/// @requires {Variable} $mq-breakpoints\n///\n/// @example scss\n///  @include mq-add-breakpoint(tvscreen, 1920px);\n///  @include mq(tvscreen) {}\n@mixin mq-add-breakpoint($name, $width) {\n    $new-breakpoint: ($name: $width);\n    $mq-breakpoints: map-merge($mq-breakpoints, $new-breakpoint) !global;\n}\n\n/// Show the active breakpoint in the top right corner of the viewport\n/// @link https://github.com/sass-mq/sass-mq#seeing-the-currently-active-breakpoint\n///\n/// @param {List} $show-breakpoints ($mq-show-breakpoints) - List of breakpoints to show in the top right corner\n/// @param {Map} $breakpoints ($mq-breakpoints) - Breakpoint names and sizes\n///\n/// @requires {Variable} $mq-breakpoints\n/// @requires {Variable} $mq-show-breakpoints\n///\n/// @example scss\n///  // Show breakpoints using global settings\n///  @include mq-show-breakpoints;\n///\n///  // Show breakpoints using custom settings\n///  @include mq-show-breakpoints((L, XL), (S: 300px, L: 800px, XL: 1200px));\n@mixin mq-show-breakpoints($show-breakpoints: $mq-show-breakpoints, $breakpoints: $mq-breakpoints) {\n    body:before {\n        background-color: #FCF8E3;\n        border-bottom: 1px solid #FBEED5;\n        border-left: 1px solid #FBEED5;\n        color: #C09853;\n        font: small-caption;\n        padding: 3px 6px;\n        pointer-events: none;\n        position: fixed;\n        right: 0;\n        top: 0;\n        z-index: 100;\n\n        // Loop through the breakpoints that should be shown\n        @each $show-breakpoint in $show-breakpoints {\n            $width: mq-get-breakpoint-width($show-breakpoint, $breakpoints);\n            @include mq($show-breakpoint, $breakpoints: $breakpoints) {\n                content: \"#{$show-breakpoint} ≥ #{$width} (#{mq-px2em($width)})\";\n            }\n        }\n    }\n}\n\n@if length($mq-show-breakpoints) > 0 {\n    @include mq-show-breakpoints;\n}\n","$SiteHeader-image--size: 70px;\r\n\r\n.SiteHeader {\r\n  @include sectionSpacingWithBorder;\r\n\r\n  display: flex;\r\n  flex-direction: row;\r\n  margin-top: $sectionPadding;\n\n  @include mq($until: mobile) {\n    flex-direction: column;\n  }\n}\r\n\r\n.SiteHeader-imageLink {\r\n  max-height: $SiteHeader-image--size;\r\n  max-width: $SiteHeader-image--size;\r\n  display: block;\n\n  @include mq($until: mobile) {\n    margin: 0 auto 10px auto;\n  }\n}\r\n\r\n.SiteHeader-image {\r\n  max-width: 100%;\r\n  max-height: 100%;\r\n  width: 100%;\r\n  height: auto;\r\n}\r\n\r\n.SiteHeader-text {\r\n  padding-left: $paragraphSpacing;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\n\n  @include mq($until: mobile) {\n    padding-left: 0;\n  }\n}\r\n\r\n.SiteHeader-titleLink {\r\n  display: block;\r\n}\r\n\r\n$SiteHeader-title--fontSize: $fontSize-largest;\r\n\r\n.SiteHeader-title {\r\n  margin: 0;\r\n  padding: 0;\r\n  font-size: $SiteHeader-title--fontSize;\r\n  line-height: 1;\r\n}\r\n\r\n.SiteHeader-description {\r\n  margin: 0;\r\n  padding: 0;\r\n  font-size: $fontSize-large;\r\n}\r\n","$sectionPadding: 40px;\r\n$paragraphSpacing: $sectionPadding / 2;\r\n\r\n@mixin sectionSpacing {\r\n  padding-bottom: $sectionPadding;\r\n  margin-bottom: $sectionPadding;\r\n}\r\n\r\n@mixin sectionSpacingWithBorder {\r\n  padding-bottom: $sectionPadding;\r\n  margin-bottom: $sectionPadding;\r\n  border-bottom: 1px solid $lightGrey;\r\n}\r\n",".Now {\r\n  @include sectionSpacingWithBorder;\r\n}\r\n\r\n.Now-title {\r\n  line-height: 1;\r\n}\r\n\r\n.Now-imageList {\r\n  list-style: none;\r\n  margin: 0;\r\n  padding: 0;\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  margin-top: $sectionPadding;\r\n}\r\n\r\n.Now-imageListItem {\r\n  width: calc((100% / 3) - #{$paragraphSpacing});\r\n}\r\n\r\n.Now-imageLink {\r\n  display: block;\r\n}\r\n\r\n.Now-image {\r\n  width: 100%;\r\n  height: auto;\r\n}\r\n",".Social {\r\n  @include sectionSpacingWithBorder;\r\n}\r\n\r\n.Social-title {\r\n  line-height: 1;\r\n}\r\n\r\n.Social-list {\r\n  list-style: none;\r\n  margin: 0;\r\n  padding: 0;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  margin-top: 10px;\r\n}\r\n\r\n.Social-listItem {\r\n  width: calc((100% / 6) - #{$paragraphSpacing});\r\n  max-width: 60px;\r\n}\r\n\r\n.Social-link {\r\n  display: block;\r\n}\r\n\r\n.Social-text {\r\n  display: none;\r\n}\r\n\r\n.Social-icon {\r\n  width: 100%;\r\n  height: auto;\r\n}\r\n\r\n.Social-twitterPath--blue {\r\n  fill: $twitterBlue;\r\n\r\n  a:hover & {\r\n    fill: $twitterBlue--highlight;\r\n  }\r\n}\r\n\r\n.Social-githubPath--black {\r\n  fill: $githubBlack;\r\n\r\n  a:hover & {\r\n    fill: $githubBlack--highlight;\r\n  }\r\n}\r\n\r\n.Social-linkedInPath--blue {\r\n  fill: $linkedInBlue;\r\n\r\n  a:hover & {\r\n    fill: $linkedInBlue--highlight;\r\n  }\r\n}\r\n\r\n.Social-pinterestPath--red {\r\n  fill: $pinterestRed;\r\n\r\n  a:hover & {\r\n    fill: $pinterestRed--highlight;\r\n  }\r\n}\r\n\r\n.Social-emailPath--blue {\r\n  fill: $emailBlue;\r\n\r\n  a:hover & {\r\n    fill: $emailBlue--highlight;\r\n  }\r\n}\r\n\r\n.Social-youtTube--red {\r\n  fill: $youTubeRed;\r\n\r\n  a:hover & {\r\n    fill: $youTubeRed--highlight;\r\n  }\r\n}\r\n\r\n.Social-youtTube--grey {\r\n  fill: $youTubeGrey;\r\n}\r\n\r\n.Social-youtTube--white {\r\n  fill: $youTubeWhite;\r\n}\r\n",".Projects {\r\n  @include sectionSpacingWithBorder;\r\n}\r\n\r\n.Projects-title {\r\n  line-height: 1;\r\n  margin-bottom: $sectionPadding;\r\n}\r\n",".ProjectLoopItem {\r\n  @include sectionSpacing;\r\n\r\n  display: flex;\r\n\r\n  @include mq($until: mobile) {\r\n    flex-direction: column;\r\n  }\r\n}\r\n\r\n$ProjectLoopItem-imageLink--size: 100px;\r\n\r\n.ProjectLoopItem-imageLink {\r\n  display: block;\r\n  width: $ProjectLoopItem-imageLink--size;\r\n\r\n  @include mq($until: mobile) {\r\n    margin: 0 auto 10px auto;\r\n  }\r\n}\r\n\r\n.ProjectLoopItem-image {\r\n  display: block;\r\n  width: $ProjectLoopItem-imageLink--size;\r\n  max-width: none;\r\n  max-height: none;\r\n}\r\n\r\n.ProjectLoopItem-text {\r\n  padding-left: $paragraphSpacing;\r\n\r\n  @include mq($until: mobile) {\r\n    padding-left: 0;\r\n  }\r\n}\r\n\r\n.ProjectLoopItem-title {\r\n  margin: 0;\r\n}\r\n",".Project {\r\n  overflow: hidden;\r\n\r\n  img {\r\n    display: block;\r\n    margin: $paragraphSpacing 0;\r\n    width: 100%;\r\n    height: auto;\r\n  }\r\n\r\n  div {\r\n    width: 100% !important;\r\n  }\r\n}\r\n\r\n.Project-title {\r\n  margin-top: 0;\r\n}\r\n"]}